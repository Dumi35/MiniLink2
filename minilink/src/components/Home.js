import React, { useState, useEffect } from "react";
import ReactDOM from "react-dom";
import QRCode from "react-qr-code";
import { saveAs } from 'file-saver'
import axios from "axios"; //for routing to server
import "../App.css"


function Home() {

  const serverLink = `http://localhost:4000/`
  const clientLink = `http://localhost:3000/`

  const [longURL, setLongURL] = useState('');
  const [miniLink, setMiniLink] = useState('');

  const URLPattern = /^https?:\/\/[a-zA-Z0-9.-]+\.[a-zA-Z]{2,}/i;

  const [showWarning, setShowWarning] = useState(false);
  const [loadQR, setloadQR] = useState(false);
  const [loadedMiniLink, setLoadedMiniLink] = useState(false);

  const handleSubmit = (event) => {
    event.preventDefault(); // Prevent default form submission behavior o.e reloading the page
  };

  const validateLongURL = () => {
    //long URL matches the link pattern
    if (URLPattern.test(longURL)) {
      createMiniLink()
      setShowWarning(false)
    }
    else {
      setShowWarning(true)
    }
  }

  //generate random string for each link
  const getRandomString = (length) => {
    let randomChars = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';
    let result = '';
    for (let i = 0; i < length; i++) {
      result += randomChars.charAt(Math.floor(Math.random() * randomChars.length));
    }
    return result
  }

  const createMiniLink = () => {
    //validate minilink to avoid duplicates in db
    setMiniLink(clientLink + getRandomString(7))

  }

  let count = 0;

  useEffect(() => {
    axios.get(`${serverLink}?miniLink=${miniLink}`, {
      miniLink
    }).then(response => {
      //link does not exist on db so create document
      if (response.data.length === 0) {
        document.getElementById("miniLinkField").value = miniLink
        axios.post(`${serverLink}`, {
          longURL,
          miniLink
        })//.then(console.log("response "+response.data)).catch(err=>console.log("post error"+err))
        setLoadedMiniLink(true)
      }
      //create another minilink
      else {
        //count++
        //if link has been recreated 9 times, stop
        //let's see what Miracle and Clem think
        //if(count!=9){
        createMiniLink()//test with 123 as random string
        //}

      }

    })
  }, [miniLink]);

  function loadQRMenu() {
    setloadQR(!loadQR)
  }

  const downloadQRCode = () => {
    // Get the SVG element generated by the QRCode component
    const qrCodeElement = document.getElementById('qrCode');

    if (qrCodeElement) {
      // Convert the SVG element to XML string
      const svgXml = new XMLSerializer().serializeToString(qrCodeElement);
      // Convert the XML string to a Blob object
      const blob = new Blob([svgXml], { type: 'image/svg+xml' });
      return blob
    } else {
      console.error('QR code element not found');
    }
  };

  function downloadQrSvg() {
    const blob = downloadQRCode()
    // Trigger file download
    saveAs(blob, 'qr-code.svg');
  }

  function downloadQrPng() {
    const qrCodeElement = document.getElementById('qrCode');
    const canvas = document.createElement('canvas');
    const context = canvas.getContext('2d');

    if (qrCodeElement && context) {
      const svgString = new XMLSerializer().serializeToString(qrCodeElement);

      const svgImage = new Image();
      svgImage.onload = () => {
        canvas.width = qrCodeElement.clientWidth;
        canvas.height = qrCodeElement.clientHeight;
        context.drawImage(svgImage, 0, 0);

        canvas.toBlob(blob => {
          if (blob) {
            saveAs(blob, 'qr-code.png');
          }
        }, 'image/png');
      };
      svgImage.src = 'data:image/svg+xml;base64,' + btoa(unescape(encodeURIComponent(svgString)));
    } else {
      console.error('QR code element or canvas context not found');
    }
  }

  function downloadQrJpg() {
    const qrCodeElement = document.getElementById('qrCode');
    const canvas = document.createElement('canvas');
    const context = canvas.getContext('2d');

    if (qrCodeElement && context) {
      const svgString = new XMLSerializer().serializeToString(qrCodeElement);

      const svgImage = new Image();
      svgImage.onload = () => {
        canvas.width = qrCodeElement.clientWidth;
        canvas.height = qrCodeElement.clientHeight;
        context.drawImage(svgImage, 0, 0);

        canvas.toBlob(blob => {
          if (blob) {
            saveAs(blob, 'qr-code.jpeg');
          }
        }, 'image/jpeg');
      };
      svgImage.src = 'data:image/svg+xml;base64,' + btoa(unescape(encodeURIComponent(svgString)));
    } else {
      console.error('QR code element or canvas context not found');
    }
  }


  function copyMiniLink() {
    var copyText = document.getElementById("miniLinkField");

    // Select the text field
    copyText.select();
    copyText.setSelectionRange(0, 99999); // For mobile devices

    // Copy the text inside the text field
    navigator.clipboard.writeText(copyText.value);

  }

  function shortenAnotherURL(){
    setLoadedMiniLink(false)
    document.getElementById("miniLinkField").value=""
    document.getElementById("longURLField").value=""
  }


  return (

    <div className="block">

      <p className="p__title">
        MiniLink
      </p>
      <p className="p__description">
        Create shorter URLs with Mini Link
      </p>

      <form className="form" onSubmit={handleSubmit}>
        <div className="form__div">
          <label className="form__label">
            <svg width="24" height="24" viewBox="0 0 38 38" fill="none" xmlns="http://www.w3.org/2000/svg">
              <path d="M19.1443 26.5268C19.2973 26.6793 19.4186 26.8604 19.5014 27.0598C19.5843 27.2592 19.6269 27.473 19.6269 27.689C19.6269 27.9049 19.5843 28.1187 19.5014 28.3181C19.4186 28.5175 19.2973 28.6986 19.1443 28.8511L18.3322 29.6632C16.7933 31.2021 14.7062 32.0666 12.5299 32.0666C10.3536 32.0666 8.26641 31.2021 6.72754 29.6632C5.18866 28.1243 4.32413 26.0371 4.32413 23.8608C4.32413 21.6845 5.18866 19.5974 6.72754 18.0585L10.0252 14.7622C11.5038 13.28 13.4932 12.4191 15.5858 12.3561C17.6785 12.2931 19.7161 13.0326 21.2812 14.4231C21.4428 14.5668 21.5745 14.7408 21.6689 14.9354C21.7632 15.1299 21.8183 15.3411 21.831 15.5569C21.8437 15.7728 21.8137 15.989 21.7429 16.1932C21.672 16.3975 21.5616 16.5858 21.418 16.7474C21.2743 16.9089 21.1003 17.0407 20.9057 17.135C20.7112 17.2293 20.5 17.2844 20.2842 17.2971C20.0683 17.3098 19.8521 17.2798 19.6479 17.209C19.4436 17.1381 19.2553 17.0277 19.0937 16.8841C18.1552 16.0505 16.9336 15.6071 15.6789 15.6445C14.4242 15.6818 13.2312 16.1972 12.3439 17.0851L9.04902 20.3772C8.12584 21.3004 7.6072 22.5525 7.6072 23.8581C7.6072 25.1637 8.12584 26.4158 9.04902 27.339C9.9722 28.2621 11.2243 28.7808 12.5299 28.7808C13.8355 28.7808 15.0876 28.2621 16.0107 27.339L16.8228 26.5268C16.9752 26.3743 17.1562 26.2533 17.3553 26.1707C17.5545 26.0882 17.768 26.0457 17.9836 26.0457C18.1992 26.0457 18.4127 26.0882 18.6119 26.1707C18.811 26.2533 18.992 26.3743 19.1443 26.5268ZM29.2725 7.11279C27.7323 5.57628 25.6456 4.71338 23.4701 4.71338C21.2946 4.71338 19.2079 5.57628 17.6678 7.11279L16.8557 7.9249C16.5475 8.23311 16.3743 8.65113 16.3743 9.08701C16.3743 9.52288 16.5475 9.94091 16.8557 10.2491C17.1639 10.5573 17.5819 10.7305 18.0178 10.7305C18.4536 10.7305 18.8717 10.5573 19.1799 10.2491L19.992 9.43701C20.9152 8.51383 22.1673 7.99519 23.4728 7.99519C24.7784 7.99519 26.0305 8.51383 26.9537 9.43701C27.8769 10.3602 28.3955 11.6123 28.3955 12.9179C28.3955 14.2234 27.8769 15.4755 26.9537 16.3987L23.6574 19.6964C22.7694 20.5839 21.5757 21.0985 20.3207 21.1348C19.0656 21.1712 17.8442 20.7265 16.9062 19.8919C16.7447 19.7483 16.5564 19.6379 16.3521 19.567C16.1479 19.4961 15.9316 19.4662 15.7158 19.4789C15.5 19.4916 15.2888 19.5467 15.0943 19.641C14.8997 19.7353 14.7257 19.867 14.582 20.0286C14.4384 20.1902 14.328 20.3785 14.2571 20.5827C14.1863 20.787 14.1563 21.0032 14.169 21.219C14.1817 21.4349 14.2368 21.6461 14.3311 21.8406C14.4254 22.0351 14.5572 22.2092 14.7187 22.3528C16.2828 23.7431 18.319 24.483 20.4107 24.4213C22.5024 24.3595 24.4914 23.5007 25.9707 22.0206L29.2684 18.7243C30.8067 17.1846 31.6711 15.0973 31.6719 12.9208C31.6726 10.7442 30.8097 8.65637 29.2725 7.11552V7.11279Z" fill="white" />
            </svg>
            <p>Enter long URL</p>

          </label>
          <input className="form__input form__input--primary" required onChange={event => setLongURL(event.target.value)} id="longURLField"></input>
          <p className={showWarning ? 'p__error-msg' : 'hidden'}>Please enter a valid URL</p>
        </div>

        <div className="form__div">
          <label className="form__label">
            <svg width="36" height="36" viewBox="0 0 38 38" fill="none" xmlns="http://www.w3.org/2000/svg">
              <path fill-rule="evenodd" clip-rule="evenodd" d="M12.1652 29.1876L22.3735 18.9749C23.1457 18.2032 23.5798 17.1565 23.5802 16.0648C23.5806 14.9732 23.1473 13.9261 22.3757 13.1539C21.6041 12.3817 20.5573 11.9477 19.4657 11.9473C18.3741 11.9469 17.327 12.3801 16.5548 13.1517L6.33624 23.3557C5.95321 23.7384 5.64933 24.1929 5.44193 24.693C5.23453 25.1932 5.12768 25.7293 5.12747 26.2708C5.12727 26.8123 5.23372 27.3485 5.44074 27.8488C5.64777 28.3492 5.95131 28.8038 6.33405 29.1868C6.71678 29.5699 7.17121 29.8737 7.67139 30.0811C8.17157 30.2885 8.7077 30.3954 9.24917 30.3956C9.79064 30.3958 10.3269 30.2894 10.8272 30.0823C11.3275 29.8753 11.7822 29.5703 12.1652 29.1876ZM16.5417 16.0626L19.4583 18.9792L20.9167 17.5209C21.1082 17.3294 21.2601 17.102 21.3637 16.8518C21.4674 16.6016 21.5207 16.3334 21.5207 16.0626C21.5207 15.7917 21.4674 15.5235 21.3637 15.2733C21.2601 15.0231 21.1082 14.7957 20.9167 14.6042C20.7251 14.4127 20.4978 14.2608 20.2476 14.1572C19.9973 14.0535 19.7292 14.0002 19.4583 14.0002C19.1875 14.0002 18.9193 14.0535 18.6691 14.1572C18.4189 14.2608 18.1915 14.4127 18 14.6042L16.5417 16.0626Z" fill="white" />
              <path d="M10.3569 7.16257C10.4531 6.80236 10.9635 6.80236 11.0598 7.16257L11.5833 9.09924C11.6 9.16071 11.6324 9.21675 11.6775 9.26178C11.7225 9.30682 11.7785 9.33927 11.84 9.35591L13.7767 9.87799C14.1369 9.97424 14.1369 10.4847 13.7767 10.5809L11.8385 11.1044C11.7771 11.1211 11.721 11.1535 11.676 11.1986C11.631 11.2436 11.5985 11.2996 11.5819 11.3611L11.0583 13.2963C10.9621 13.6565 10.4517 13.6565 10.3554 13.2963L9.83333 11.3597C9.81669 11.2982 9.78424 11.2421 9.73921 11.1971C9.69418 11.1521 9.63814 11.1196 9.57666 11.103L7.63854 10.5809C7.27979 10.4847 7.27979 9.97424 7.63854 9.87799L9.57812 9.35445C9.63959 9.33781 9.69564 9.30536 9.74067 9.26033C9.7857 9.21529 9.81815 9.15925 9.83479 9.09778L10.3569 7.16257ZM24.9402 5.70424C25.0365 5.34403 25.5469 5.34403 25.6431 5.70424L26.1652 7.6409C26.1818 7.70238 26.2143 7.75842 26.2593 7.80345C26.3044 7.84848 26.3604 7.88093 26.4219 7.89757L28.3585 8.41965C28.7187 8.5159 28.7187 9.02632 28.3585 9.12257L26.4219 9.64465C26.3604 9.66129 26.3044 9.69374 26.2593 9.73878C26.2143 9.78381 26.1818 9.83985 26.1652 9.90132L25.6431 11.838C25.5469 12.1982 25.0365 12.1982 24.9402 11.838L24.4167 9.90132C24.3999 9.83967 24.3672 9.78351 24.3219 9.73847C24.2766 9.69342 24.2203 9.66107 24.1585 9.64465L22.2219 9.12257C21.8631 9.02632 21.8631 8.5159 22.2219 8.41965L24.1585 7.89757C24.2203 7.88116 24.2766 7.8488 24.3219 7.80376C24.3672 7.75871 24.3999 7.70255 24.4167 7.6409L24.9402 5.70424ZM26.3985 18.8292C26.4948 18.469 27.0052 18.469 27.1015 18.8292L27.6235 20.7659C27.6402 20.8274 27.6726 20.8834 27.7177 20.9285C27.7627 20.9735 27.8187 21.0059 27.8802 21.0226L29.8169 21.5447C30.1771 21.6409 30.1771 22.1513 29.8169 22.2476L27.8802 22.7697C27.8187 22.7863 27.7627 22.8187 27.7177 22.8638C27.6726 22.9088 27.6402 22.9648 27.6235 23.0263L27.1015 24.963C27.0052 25.3232 26.4948 25.3232 26.3985 24.963L25.8765 23.0263C25.8597 22.9647 25.827 22.9085 25.7817 22.8635C25.7364 22.8184 25.6801 22.7861 25.6183 22.7697L23.6817 22.2476C23.3229 22.1513 23.3229 21.6409 23.6817 21.5447L25.6183 21.0226C25.6801 21.0062 25.7364 20.9738 25.7817 20.9288C25.827 20.8837 25.8597 20.8276 25.8765 20.7659L26.3985 18.8292Z" fill="white" />
            </svg>
            <p>Your mini link</p>
          </label>
          <input className="form__input form__input--secondary" readOnly id="miniLinkField"></input>
        </div>

        <button className={loadedMiniLink ? "hidden" : "form__btn"}onClick={validateLongURL}>
          Shorten URL
        </button>

        {/* appear when minilink has been loaded */}
        <div className={loadedMiniLink ? "loaded-mini-link-div" : "hidden"}>
          <div className="form__link-action-div">
            <button className="form__btn form__link-action-btn form__link-action-btn--blue" type="button" onClick={loadQRMenu}>
              <svg width="24" height="25" viewBox="0 0 28 28" fill="none" xmlns="http://www.w3.org/2000/svg">
                <path d="M7 3.22363H4C3.44772 3.22363 3 3.67135 3 4.22363V7.22363C3 7.77592 3.44772 8.22363 4 8.22363H7C7.55228 8.22363 8 7.77592 8 7.22363V4.22363C8 3.67135 7.55228 3.22363 7 3.22363Z" stroke="white" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" />
                <path d="M20 3.22363H17C16.4477 3.22363 16 3.67135 16 4.22363V7.22363C16 7.77592 16.4477 8.22363 17 8.22363H20C20.5523 8.22363 21 7.77592 21 7.22363V4.22363C21 3.67135 20.5523 3.22363 20 3.22363Z" stroke="white" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" />
                <path d="M7 16.2236H4C3.44772 16.2236 3 16.6713 3 17.2236V20.2236C3 20.7759 3.44772 21.2236 4 21.2236H7C7.55228 21.2236 8 20.7759 8 20.2236V17.2236C8 16.6713 7.55228 16.2236 7 16.2236Z" stroke="white" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" />
                <path d="M21 16.2236H18C17.4696 16.2236 16.9609 16.4343 16.5858 16.8094C16.2107 17.1845 16 17.6932 16 18.2236V21.2236M21 21.2236V21.2336M12 7.22363V10.2236C12 10.7541 11.7893 11.2628 11.4142 11.6378C11.0391 12.0129 10.5304 12.2236 10 12.2236H7M3 12.2236H3.01M12 3.22363H12.01M12 16.2236V16.2336M16 12.2236H17M21 12.2236V12.2336M12 21.2236V20.2236" stroke="white" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" />
              </svg>
              QR
            </button>
            <div className={loadQR ? "qr-div" : "hidden"}>
              <QRCode id="qrCode" value={miniLink} size={100} style={{ height: "auto", maxWidth: "100%", width: "100%" }} bgColor="#E8E8E8" />
              <div className="qr-btns-div">
                <button type="button" className="qr-btns-div__btn" onClick={downloadQrSvg}>SVG</button>
                <button type="button" className="qr-btns-div__btn" onClick={downloadQrPng}>PNG</button>
                <button type="button" className="qr-btns-div__btn" onClick={downloadQrJpg}>JPG</button>
              </div>
            </div>
            <button className="form__btn form__link-action-btn form__link-action-btn--red" type="button" onClick={copyMiniLink} >
              <svg width="24" height="25" viewBox="0 0 24 25" fill="none" xmlns="http://www.w3.org/2000/svg">
                <path d="M7 9.89063C7 9.1833 7.28099 8.50494 7.78115 8.00478C8.28131 7.50462 8.95967 7.22363 9.667 7.22363H18.333C18.6832 7.22363 19.03 7.29262 19.3536 7.42665C19.6772 7.56068 19.9712 7.75713 20.2189 8.00478C20.4665 8.25243 20.663 8.54644 20.797 8.87002C20.931 9.19359 21 9.5404 21 9.89063V18.5566C21 18.9069 20.931 19.2537 20.797 19.5772C20.663 19.9008 20.4665 20.1948 20.2189 20.4425C19.9712 20.6901 19.6772 20.8866 19.3536 21.0206C19.03 21.1546 18.6832 21.2236 18.333 21.2236H9.667C9.31676 21.2236 8.96996 21.1546 8.64638 21.0206C8.32281 20.8866 8.0288 20.6901 7.78115 20.4425C7.53349 20.1948 7.33704 19.9008 7.20301 19.5772C7.06898 19.2537 7 18.9069 7 18.5566V9.89063Z" stroke="white" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" />
                <path d="M4.012 16.9606C3.70534 16.7858 3.45027 16.5331 3.27258 16.2281C3.09488 15.9231 3.00085 15.5766 3 15.2236V5.22363C3 4.12363 3.9 3.22363 5 3.22363H15C15.75 3.22363 16.158 3.60863 16.5 4.22363" stroke="white" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" />
              </svg>
              Copy
            </button>

          </div>

          <div className="form__link-action-div">
            <button className="form__btn" type="button">
              My MiniLinks
            </button>
            <button className="form__btn" type="button" onClick={shortenAnotherURL}>
              Shorten Another
            </button>

          </div>
        </div>


      </form>

    </div>
  )
  // Render the App component into the specified container
  ReactDOM.render(<Home />, document.getElementById("Container"));
}



export default Home;